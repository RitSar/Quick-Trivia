{"ast":null,"code":"var _jsxFileName = \"D:\\\\Files\\\\react-typescript-quiz\\\\react-quiz\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\nimport QuestionCard from './components/QuestionCard';\nimport { Difficulty } from './API';\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY)); // console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {};\n\n  const nextQuestion = () => {};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"REACT QUIZ\"), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start\",\n    onClick: startTrivia,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"Start\") : null, !gameOver ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 20\n    }\n  }, \"Score: \") : null, loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }, \"Loading Questions ...\"), !loading && !gameOver && /*#__PURE__*/React.createElement(QuestionCard, {\n    questionNr: number + 1,\n    totalQuestions: TOTAL_QUESTIONS,\n    question: questions[number].question,\n    answers: questions[number].answers,\n    userAnswer: userAnswers ? userAnswers[number] : undefined,\n    callback: checkAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"next\",\n    onClick: nextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Next Question\") : null);\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Files/react-typescript-quiz/react-quiz/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","Difficulty","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","EASY","startTrivia","newQuestions","checkAnswer","e","nextQuestion","length","question","answers","undefined"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\nimport {fetchQuizQuestions} from './API';\n\nimport QuestionCard from './components/QuestionCard';\n\nimport {QuestionState, Difficulty} from './API';\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\nconst [loading, setLoading] = useState(false);\nconst [questions, setQuestions] = useState<QuestionState[]>([]);\nconst [number, setNumber] = useState(0);\nconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\nconst [score, setScore] = useState(0);\nconst [gameOver, setGameOver] = useState(true);\n\nconsole.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n// console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n  }\n\n  const nextQuestion = () => {\n\n  }\n  return (\n    <div className=\"App\">\n      <h1>REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n      <button className=\"start\" onClick={startTrivia}>\n        Start\n      </button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score: </p> : null}\n      {loading && <p>Loading Questions ...</p>}\n      {!loading && !gameOver && (\n        <QuestionCard\n        questionNr={number+1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number]: undefined}\n        callback={checkAnswer}\n        />\n      )}  \n      {!gameOver && !loading && userAnswers.length === number+1 && number !== TOTAL_QUESTIONS-1 ? (\n      <button className='next' onClick={nextQuestion}>\n      Next Question\n    </button>\n      ):null}\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}